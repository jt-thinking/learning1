jQuery基础(一)
jQuery选择的艺术
十年历程
简单的说是一款JavaScript库

方便的处理HTML、事件、动画等
Html：处理Html文档中的DOM节点，如添加、删除等
事件:通过jQuery对页面上的事件进行处理
动画:通过jQuery实现淡入、淡出、滑动等

可以兼容多浏览器

如何安装
下载jQuery

如何选择版本
V1.X
V2.X：不兼容IE6-8
V3.X：分为精简版和普通版
V3.X普通版和与V2普通版差不多，更新相应API,加了相应性能优化

我们可以选择1.12.4
兼容性更好。国内使用IE6-IE8还是很多的

使用CDN（引用网络中的jquery） 比如360 bootcdn 微软CDN
Content Delivery Network 内容分发网络
使用节点服务器起到加速的作用
不浪费自己服务器带宽的性能，加快下载速度

jQuery的基本概念
设计理念 Write less,do more

结构、表现和行为分离
HTML   CSS    JavaScript


$
.window.jQuery===window.$

调用jQuery本身的一些属性和方法
$.xxx
$.each()
$.noop
$.toArray()


调用jQuery本身的一些选择,返回一个jQuery对象
$('#myDiv')
$('.myClass')

什么叫jQuery对象
1、是原生DOM对象的封装
2、和原生DOM对象不同，但是可以相互转化
3、jQuery对象包含很多方法，方便的操作DOM元素


链式语法chaining
$('#divTest')
	.test()
	.removeClass
	.addClass
	.css

破坏性方法

$(document).ready(function(){})  VS window.onload

window.onload 会等待页面加载完之后才显示，用户体验不好
所有jQuery做了ready这个方法，DOM元素加载好就会显示

jQuery是一个类数组对象，而DOM对象就是一个单独的DOM元素

利用数组下标的方式读取到jQuery中的DOM对象
HTML代码
<div>元素一</div>
<div>元素二</div>
<div>元素三</div>
JavaScript代码
var $div = $('div') //jQuery对象
var div = $div[0] //转化成DOM对象
div.style.color = 'red' //操作dom对象的属性
用jQuery找到所有的div元素（3个），因为jQuery对象也是一个数组结构，可以通过数组下标索引找到第一个div元素，通过返回的div对象，调用它的style属性修改第一个div元素的颜色。这里需要注意的一点是，数组的索引是从0开始的，也就是第一个元素下标是0

通过jQuery自带的get()方法
jQuery对象自身提供一个.get() 方法允许我们直接访问jQuery对象中相关的DOM节点，get方法中提供一个元素的索引：
var $div = $('div') //jQuery对象
var div = $div.get(0) //通过get方法，转化成DOM对象
div.style.color = 'red' //操作dom对象的属性
其实我们翻开源码，看看就知道了，get方法就是利用的第一种方式处理的，只是包装成一个get让开发者更直接方便的使用。


DOM对象转化成jQuery对象
相比较jQuery转化成DOM，开发中更多的情况是把一个dom对象加工成jQuery对象。$(参数)是一个多功能的方法，通过传递不同的参数而产生不同的作用。

如果传递给$(DOM)函数的参数是一个DOM对象，jQuery方法会把这个DOM对象给包装成一个新的jQuery对象
通过$(dom)方法将普通的dom对象加工成jQuery对象之后，我们就可以调用jQuery的方法了

HTML代码

<div>元素一</div>
<div>元素二</div>
<div>元素三</div>
JavaScript代码

var div = document.getElementsByTagName('div'); //dom对象
var $div = $(div); //jQuery对象
var $first = $div.first(); //找到第一个div元素
$first.css('color', 'red'); //给第一个元素设置颜色
通过getElementsByTagName获取到所有div节点的元素，结果是一个dom合集对象，不过这个对象是一个数组合集(3个div元素)。通过$(div)方法转化成jQuery对象，通过调用jQuery对象中的first与css方法查找第一个元素并且改变其颜色。

#jQuery选择器之ID选择器
$("#id")
#jQuery选择器之类选择器
$(".arron")选择所有的该类
#jQuery选择器之元素选择器
$("element")
#jQuery选择器之全选择器
$("*")
#jQuery选择器之层级选择器
$("div>p") 子选择器，选择div元素下的第一代p元素
$("div p") 后代选择器，可以选择div元素下的子代、孙代(比如div 的子代是 span ,span 的子代是p ，p也可以被选择)
$(".prev+next")相邻兄弟选择器 prev为类选择器名称，不可改变的。next为标签名称，比如span,div。prev所在元素和next元素应该为兄弟元素，需要有同一个父元素。这个选择器只能选择.prev所在元素之后的的相邻兄弟元素
$(".prev~next")一般兄弟选择器 和$(".prev+next")的唯一区别就是，前者可以筛选出.prev元素之后的的所有兄弟元素

#jQuery选择器之基本筛选选择器
$(".jt:first") 筛选出第一个以jt类选择器 标记的元素
$(".jt:last") 筛选出最后一个以jt类选择标记的元素
$(".jt:even") 筛选出所有以jt类选择器标记的元素中索引值为奇数的元素
$(".jt:odd") 筛选出所有以jt类选择器标记的元素中索引值为偶数的元素
$(".jt:eq(0)") 筛选出所有以jt类选择器标记的元素中索引值为0的元素
$(".jt:gt(2)") 筛选出所有以jt类选择器标记的元素中索引值大于2的元素
$(".jt:lt(7)") 筛选出所有以jt类选择器标记的元素中索引值小于7的元素，和gt刚好相反
$(".jt:not('.div')") 筛选出所有Jt类选择器标记的元素中 非div类的元素
$(":header") 筛选出所有标题元素
$(":root")  筛选根目录
$(":animated")选择所有正在执行动画效果的元素

#jQuery选择器之内容选择器
$(".class:contains(text)")查找class类中包含text的元素

#jQuery选择器之:has
$(".class:has(selector)")查找class类中包含selector元素的元素

#jQuery选择器之:empty
#("a:empty")查找a元素下面所有空节点(没有子元素的元素)

#jQuery选择器之:parent
#("p:parent")查找所有含有子元素或者文本的元素

#jQuery选择器之visible选择器

#$(":visible")  选择所有显示的元素  使用时候一般配合id选择器或者class选择器，比如写成$(".div:visible")  如果不加选择器，可能会把隐藏的js代码等都显示出来哦
#$(":hidden") 选额所有隐藏的元素  和visible刚好相反

#$("div[name='p1']") 筛选出div元素中属性值name为p1的元素
#$("div[name|='p']")筛选出div元素中属性值name为p或者p-abc(以p-开头的字符串)
#$("div[p2]") 筛选出div元素中有p2属性的元素
#$("div[name~='a']")筛选出div元素中name属性值为a或者以空格连字符连接a的字符串(a b)或者(b a)都可以
#$("div[name^='imooc']")筛选出div元素中name属性值为imooc或者以imooc开头的字符串的元素
#$("div[name$='imooc']")筛选出div元素中name属性值为imooc或者以imooc结尾的字符串的元素
#$("div[name*='imooc']")筛选出div元素中name属性值为imooc或者包含imooc字符串的元素
#$("div[name！='imooc']")筛选出div元素中name属性值不包含imooc的元素


#jQuery选择器之子元素筛选选择器
$("p:first-child") 筛选出所有p元素，如果p元素是其父元素的第一个子元素，则该p元素被选中
$("p:last-child") 筛选出所有p元素，如果p元素是其父元素的最后一个子元素，则该p元素被选中
$("p:only-child") 筛选出所有p元素，如果p元素是其父元素唯一的一个子元素，则该p元素被选中
$("p:nth-child(2)") 筛选出所有p元素，如果p元素是其父元素的第n个子元素，则该p被选中
$("p:nth-last-child(3)")筛选出所有p元素，如果p元素是其父元素的倒数第n个子元素，则该p被选中


#jQuery选择器之表单元素选择器
$(":input")选择所有的inout,textarea,select和button元素
$(":text") 匹配所有input 元素中的文本框
$(":password") 匹配所有input 元素中的密码框
$(":radio") 匹配所有input 元素中的单选框
$(":checkbox")匹配所有input 元素中的复选框
$(":submit")匹配所有input 元素中的提交按钮
$(":image")匹配所有input 元素中的图片
$(":button")匹配所有input 元素中的按钮
$(":file") 匹配所有input 元素中的file元素


#jQuery选择器之表单对象属性筛选选择器
$(":enabled") 选取可用的表单元素
$(":disabled")选取不可用的表单元素
$(":checked")选取被选中的<input>元素
$(":selected") 选取被选中 的<option>元素


#jQuery选择器之特殊选择器this
$(this)代替jQuery对象


#jQuery增删改查html元素属性的方法.attr()和.removeAttr()
attr(传入属性名) 获取属性值
attr(属性名，属性值)设置属性的值
attr(属性名，属性值)设置属性的函数值
attr(attributes)：给指定元素设置多个属性值，即：{属性名一: “属性值一” , 属性名二: “属性值二” , … … }
removeAttr()删除方法 $(".jt").removeAttr("value")删除jt元素的value属性

#jQuery方法之html()和test()
$("p:first").html()  获取该元素的文本(包含结构)
$("p:first").html(111) 把$("p:first")选择出来的元素的html文本改成111
$("p").html(function(oldhtml,m){
		return m
}) 文档中所有p元素的文本内容依次增加 0, 1, 2, 3……

$("p:first").text() 获取该元素的文本(不包含结构)
$("p:first").text(111) 把$("p:first")选择出来的元素的html文本改成111
$("p").text(function(index,text){

})把所有p元素的文本内容依次增加 0, 1, 2, 3……

jQuery方法.val()
主要用于处理表单元素的值，比如input,select,textarea
.val()方法
1、val()无参数，获取匹配元素集合中的第一个元素
2、val(value)设置匹配的元素集合中每个元素的值
3、如果被选择的元素有multiple属性，并且至少一个选择项被选中，val()方法返回一个数组，这个数组包含每个selected的项

.html(),.text()和.val()的差异总结：

.html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容（包括html标签），.text()用来读取元素的纯文本内容，包括其后代元素，.val()是用来读取表单元素的"value"值。其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，如果其应用在多个元素上时，只能读取第一个表单元素的"value"值，但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容。
.html(htmlString),.text(textString)和.val(value)三种方法都是用来替换选中元素的内容，如果三个方法同时运用在多个元素上时，那么将会替换所有选中元素的内容。
.html(),.text(),.val()都可以使用回调函数的返回值来动态的改变多个元素的内容。

jQuery方法之.addClass()
该方法用于动态的增加样式,只能是增加，而不是替换
.addClass(classNAme)
1/.addClass( className ) : 为每个匹配元素所要增加的一个或多个样式名
2/.addClass( function(index, currentClass) ) : 这个函数返回一个或更多用空格隔开的要增加的样式名

#jQuery的属性与样式之删除样式.removeClass()
1、 removeClass([className])  每个匹配元素移除的一个或多个用空格隔开的样式名
2、.removeClass( function(index, className) ) ： 一个函数，返回一个或多个将要被移除的样式名

jQuery的属性与样式之切换样式.toggleClass()
在做某些效果的时候，可能会针对同一节点的某一个样式不断的切换，也就是addClass与removeClass的互斥切换，比如隔行换色效果
1、.toggleClass(className) 本存在该样式就删除，本来不存在就加上
2、 .toggleClass(className,switch) switch为布尔值，ture则加上className,false则删除
3、 .toggleClass(function(index,class,switch)[,switch]):用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数，接收元素的索引位置和元素旧的样式类作为参数

#jQuery的属性与样式之样式操作.css()
获取
1 .css(propertyName) 获取该元素的样式属性的计算值
2 .css([propertyNames]) 传递一组数组，返回一个对象结果
设置
 .css(propertyName, value )：设置CSS
 .css( propertyName, function )：可以传入一个回调函数，返回取到对应的值进行处理
.css( properties )：可以传一个对象，同时设置多个样式

注意事项:.css 支持驼峰写法与大小写混搭的写法，比如.css("background-color" , "red")
 .css("backgroundColor" , "red") 

.css("font-size","15px") 和 .css("fontSize","15px")是一样的效果
.css("width",function(index,value){
	value=*****;
	return (value);

})

.css({
            'font-size'        :"15px",
            "background-color" :"#40E0D0",
            "border"           :"1px solid red"
        })


#  $("p").append("im end");

#jQuery节点创建与属性的处理
var div=$("<div class=""></div>"); //创建之后是存放在内存中的
$body.append(div);

#DOM内部插入append()与appendTo(),两者正好是相反的方法
$body.append(("<div class=""></div>"));
$("<div class="">11111</div>").appendTo($(.div))


#DOM外部插入after()和before()
.after(content)在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点
.before(content)据参数设定，在匹配元素的前面插入内容

#DOM内部插入prepend()与prependTo()
和append与appendTo不同，prepend()与prependTo()是在元素开始而非末尾插入


jQuery基础(五)
使用load()方法异步请求数据

使用load()方法异步请求数据
load("url",[data],[callback])
注意url中不能有空格

使用getJSON()方法异步加载JSON格式数据
$.getJSON(url,[data],[callback])
其中，url参数为请求加载json格式文件的服务器地址，可选项data参数为请求时发送的数据，callback参数为数据请求成功后，执行的回调函数。

使用getScript()方法异步加载并执行js文件
$.getScript(url,[callback])

使用get()方法以GET方式从服务器获取数据
$.get(url,[callback])
